// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: leftover/leftover.proto

package leftover

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeftoverService_AddLeftover_FullMethodName    = "/LeftoverService/AddLeftover"
	LeftoverService_GetLeftover_FullMethodName    = "/LeftoverService/GetLeftover"
	LeftoverService_GetLeftovers_FullMethodName   = "/LeftoverService/GetLeftovers"
	LeftoverService_UpdateLeftover_FullMethodName = "/LeftoverService/UpdateLeftover"
	LeftoverService_DeleteLeftover_FullMethodName = "/LeftoverService/DeleteLeftover"
)

// LeftoverServiceClient is the client API for LeftoverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeftoverServiceClient interface {
	AddLeftover(ctx context.Context, in *LeftoverRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLeftover(ctx context.Context, in *LeftoverIdentity, opts ...grpc.CallOption) (*Leftover, error)
	GetLeftovers(ctx context.Context, in *LeftoverRequest, opts ...grpc.CallOption) (*LeftoverResponse, error)
	UpdateLeftover(ctx context.Context, in *Leftover, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteLeftover(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type leftoverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeftoverServiceClient(cc grpc.ClientConnInterface) LeftoverServiceClient {
	return &leftoverServiceClient{cc}
}

func (c *leftoverServiceClient) AddLeftover(ctx context.Context, in *LeftoverRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, LeftoverService_AddLeftover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leftoverServiceClient) GetLeftover(ctx context.Context, in *LeftoverIdentity, opts ...grpc.CallOption) (*Leftover, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Leftover)
	err := c.cc.Invoke(ctx, LeftoverService_GetLeftover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leftoverServiceClient) GetLeftovers(ctx context.Context, in *LeftoverRequest, opts ...grpc.CallOption) (*LeftoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeftoverResponse)
	err := c.cc.Invoke(ctx, LeftoverService_GetLeftovers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leftoverServiceClient) UpdateLeftover(ctx context.Context, in *Leftover, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, LeftoverService_UpdateLeftover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leftoverServiceClient) DeleteLeftover(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, LeftoverService_DeleteLeftover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeftoverServiceServer is the server API for LeftoverService service.
// All implementations must embed UnimplementedLeftoverServiceServer
// for forward compatibility.
type LeftoverServiceServer interface {
	AddLeftover(context.Context, *LeftoverRequest) (*empty.Empty, error)
	GetLeftover(context.Context, *LeftoverIdentity) (*Leftover, error)
	GetLeftovers(context.Context, *LeftoverRequest) (*LeftoverResponse, error)
	UpdateLeftover(context.Context, *Leftover) (*empty.Empty, error)
	DeleteLeftover(context.Context, *DeleteRequest) (*empty.Empty, error)
	mustEmbedUnimplementedLeftoverServiceServer()
}

// UnimplementedLeftoverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeftoverServiceServer struct{}

func (UnimplementedLeftoverServiceServer) AddLeftover(context.Context, *LeftoverRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLeftover not implemented")
}
func (UnimplementedLeftoverServiceServer) GetLeftover(context.Context, *LeftoverIdentity) (*Leftover, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeftover not implemented")
}
func (UnimplementedLeftoverServiceServer) GetLeftovers(context.Context, *LeftoverRequest) (*LeftoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeftovers not implemented")
}
func (UnimplementedLeftoverServiceServer) UpdateLeftover(context.Context, *Leftover) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeftover not implemented")
}
func (UnimplementedLeftoverServiceServer) DeleteLeftover(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeftover not implemented")
}
func (UnimplementedLeftoverServiceServer) mustEmbedUnimplementedLeftoverServiceServer() {}
func (UnimplementedLeftoverServiceServer) testEmbeddedByValue()                         {}

// UnsafeLeftoverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeftoverServiceServer will
// result in compilation errors.
type UnsafeLeftoverServiceServer interface {
	mustEmbedUnimplementedLeftoverServiceServer()
}

func RegisterLeftoverServiceServer(s grpc.ServiceRegistrar, srv LeftoverServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeftoverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeftoverService_ServiceDesc, srv)
}

func _LeftoverService_AddLeftover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeftoverServiceServer).AddLeftover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeftoverService_AddLeftover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeftoverServiceServer).AddLeftover(ctx, req.(*LeftoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeftoverService_GetLeftover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftoverIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeftoverServiceServer).GetLeftover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeftoverService_GetLeftover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeftoverServiceServer).GetLeftover(ctx, req.(*LeftoverIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeftoverService_GetLeftovers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeftoverServiceServer).GetLeftovers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeftoverService_GetLeftovers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeftoverServiceServer).GetLeftovers(ctx, req.(*LeftoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeftoverService_UpdateLeftover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Leftover)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeftoverServiceServer).UpdateLeftover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeftoverService_UpdateLeftover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeftoverServiceServer).UpdateLeftover(ctx, req.(*Leftover))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeftoverService_DeleteLeftover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeftoverServiceServer).DeleteLeftover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeftoverService_DeleteLeftover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeftoverServiceServer).DeleteLeftover(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeftoverService_ServiceDesc is the grpc.ServiceDesc for LeftoverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeftoverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LeftoverService",
	HandlerType: (*LeftoverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLeftover",
			Handler:    _LeftoverService_AddLeftover_Handler,
		},
		{
			MethodName: "GetLeftover",
			Handler:    _LeftoverService_GetLeftover_Handler,
		},
		{
			MethodName: "GetLeftovers",
			Handler:    _LeftoverService_GetLeftovers_Handler,
		},
		{
			MethodName: "UpdateLeftover",
			Handler:    _LeftoverService_UpdateLeftover_Handler,
		},
		{
			MethodName: "DeleteLeftover",
			Handler:    _LeftoverService_DeleteLeftover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leftover/leftover.proto",
}
