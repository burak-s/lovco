static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 8080 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                
                # Access logging for debugging
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: lovco_backend
                      domains: ["*"]
                      
                      # Proper CORS configuration
                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,authorization
                        max_age: "1728000"
                        expose_headers: grpc-status,grpc-message
                      
                      routes:
                        # Health check
                        - match: { prefix: "/health" }
                          route: 
                            cluster: grpc_service
                            timeout: 5s
                        
                        # LeftoverService routes
                        - match: { prefix: "/LeftoverService" }
                          route: 
                            cluster: grpc_service
                            timeout: 30s
                        
                        # ChatService routes (streaming support)
                        - match: { prefix: "/ChatService" }
                          route: 
                            cluster: grpc_service
                            timeout: 0s  # No timeout for streaming
                            idle_timeout: 300s  # 5 minutes for streaming connections
                        
                        # Catch-all
                        - match: { prefix: "/" }
                          route: 
                            cluster: grpc_service
                            timeout: 30s
                
                http_filters:
                  # gRPC-Web filter - enables web clients
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  
                  # CORS filter
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  
                  # Router filter (must be last)
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                      
  clusters:
    - name: grpc_service
      connect_timeout: 1s
      type: logical_dns
      lb_policy: round_robin
      
      # HTTP/2 for gRPC
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options:
              max_concurrent_streams: 100
      
      # Health checks
      health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          grpc_health_check:
            service_name: ""
      
      load_assignment:
        cluster_name: grpc_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      # Use this for Docker Compose
                      address: grpc_server
                      port_value: 50051

# Admin interface for monitoring
admin:
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }