/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: leftover/leftover.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = require('./leftover_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.LeftoverServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.LeftoverServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.LeftoverRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_LeftoverService_AddLeftover = new grpc.web.MethodDescriptor(
  '/LeftoverService/AddLeftover',
  grpc.web.MethodType.UNARY,
  proto.LeftoverRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.LeftoverRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.LeftoverRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.LeftoverServiceClient.prototype.addLeftover =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/LeftoverService/AddLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_AddLeftover,
      callback);
};


/**
 * @param {!proto.LeftoverRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.LeftoverServicePromiseClient.prototype.addLeftover =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/LeftoverService/AddLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_AddLeftover);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.LeftoverIdentity,
 *   !proto.Leftover>}
 */
const methodDescriptor_LeftoverService_GetLeftover = new grpc.web.MethodDescriptor(
  '/LeftoverService/GetLeftover',
  grpc.web.MethodType.UNARY,
  proto.LeftoverIdentity,
  proto.Leftover,
  /**
   * @param {!proto.LeftoverIdentity} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Leftover.deserializeBinary
);


/**
 * @param {!proto.LeftoverIdentity} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Leftover)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Leftover>|undefined}
 *     The XHR Node Readable Stream
 */
proto.LeftoverServiceClient.prototype.getLeftover =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/LeftoverService/GetLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_GetLeftover,
      callback);
};


/**
 * @param {!proto.LeftoverIdentity} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Leftover>}
 *     Promise that resolves to the response
 */
proto.LeftoverServicePromiseClient.prototype.getLeftover =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/LeftoverService/GetLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_GetLeftover);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.LeftoverRequest,
 *   !proto.LeftoverResponse>}
 */
const methodDescriptor_LeftoverService_GetLeftovers = new grpc.web.MethodDescriptor(
  '/LeftoverService/GetLeftovers',
  grpc.web.MethodType.UNARY,
  proto.LeftoverRequest,
  proto.LeftoverResponse,
  /**
   * @param {!proto.LeftoverRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.LeftoverResponse.deserializeBinary
);


/**
 * @param {!proto.LeftoverRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.LeftoverResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.LeftoverResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.LeftoverServiceClient.prototype.getLeftovers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/LeftoverService/GetLeftovers',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_GetLeftovers,
      callback);
};


/**
 * @param {!proto.LeftoverRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.LeftoverResponse>}
 *     Promise that resolves to the response
 */
proto.LeftoverServicePromiseClient.prototype.getLeftovers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/LeftoverService/GetLeftovers',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_GetLeftovers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Leftover,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_LeftoverService_UpdateLeftover = new grpc.web.MethodDescriptor(
  '/LeftoverService/UpdateLeftover',
  grpc.web.MethodType.UNARY,
  proto.Leftover,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.Leftover} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.Leftover} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.LeftoverServiceClient.prototype.updateLeftover =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/LeftoverService/UpdateLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_UpdateLeftover,
      callback);
};


/**
 * @param {!proto.Leftover} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.LeftoverServicePromiseClient.prototype.updateLeftover =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/LeftoverService/UpdateLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_UpdateLeftover);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.DeleteRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_LeftoverService_DeleteLeftover = new grpc.web.MethodDescriptor(
  '/LeftoverService/DeleteLeftover',
  grpc.web.MethodType.UNARY,
  proto.DeleteRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.DeleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.DeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.LeftoverServiceClient.prototype.deleteLeftover =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/LeftoverService/DeleteLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_DeleteLeftover,
      callback);
};


/**
 * @param {!proto.DeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.LeftoverServicePromiseClient.prototype.deleteLeftover =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/LeftoverService/DeleteLeftover',
      request,
      metadata || {},
      methodDescriptor_LeftoverService_DeleteLeftover);
};


module.exports = proto;

